llvm-py User Guide
===================

llvm-py provides Python bindings for LLVM. This document explains how
you can setup and use it. A working knowledge of Python and a basic idea
of LLVM is assumed.


Introduction
------------

http://www.llvm.org/[LLVM] (Low-Level Virtual Machine) provides enough
infrastructure to use it as the backend for your compiled, or
JIT-compiled language. It provides extensive optimization support, and
static and dynamic (JIT) backends for many platforms. See the website at
http://www.llvm.org/[http://www.llvm.org/] to discover more.

Python bindings for LLVM provides a gentler learning curve for working
with the LLVM APIs. It should also be easier to create working
prototypes and experimental languages using this medium.

.License
Both LLVM and llvm-py are distributed under (different) permissive
open source licenses. llvm-py uses the
http://opensource.org/licenses/bsd-license.php[new BSD license]. More
information is available link:license.html[here].

.Platforms
Currently, llvm-py has been built and tested only on Linux (i386, amd64)
and OpenBSD (i386, amd64). However, it should be trivial to build it on
other unices. Windows is not supported, for a variety of reasons.

.Versions
llvm-py requires verion 2.3 of LLVM. It will not work with previous
versions.

llvm-py has been built and tested with Python 2.5. It should work with
Python 2.4, with minimal changes, if any.


[[install]]
Installation
------------

llvm-py is distributed as a source tarball. You'll need to build and
install it before it can be used. At least the following will be
required for this:

- C and C\+\+ compilers (gcc/g\+\+)
- Python itself
- Python development files (headers and libraries)
- LLVM, either installed or built

On debian-based systems, the first three can be installed with the
command `sudo apt-get install gcc g\+\+ python python-dev`. Note that
ubuntu repository has an old version of llvm (1.8) which will not work
with llvm-py.

It does not matter which compiler LLVM itself was built with (g\+\+,
llvm-g\+\+ or any other); llvm-py can be built with any compiler. It has
been tried only with gcc/g\+\+ though.

Tip: If LLVM 2.3 does not install cleanly, try installing ``ocamldoc''
first.

LLVM and `--enable-pic`
~~~~~~~~~~~~~~~~~~~~~~~

The result of an LLVM build is a set of static libraries and object
files. The llvm-py contains an extension package that is built into a
shared object (_core.so) which links to these static libraries and
object files. It is therefore required that the LLVM libraries and
object files be built with the `-fPIC` option (generate position
independent code). Be sure to use the `--enable-pic` option while
configuring LLVM (default is no PIC), like this:

----
~/llvm-2.3$ ./configure --enable-pic --enable-optimized
----


llvm-config
~~~~~~~~~~~

Inorder to build llvm-py, it's build script needs to know from where it
can invoke the llvm helper program, +llvm-config+. If you've installed
LLVM, then this will be available in your +PATH+, and nothing further
needs to be done. If you've built LLVM yourself, or for any reason
+llvm-config+ is not in your +PATH+, you'll need to pass the full path
of +llvm-config+ to the build script.

You'll need to be 'root' to install llvm-py. Remember that your +PATH+
is different from that of 'root', so even if +llvm-config+ is in your
+PATH+, it may not be available when you do +sudo+.


Steps
~~~~~

The commands illustrated below assume that the LLVM source is available
under +/home/mdevan/llvm+. If you've a previous version of llvm-py
installed, you must remove it first, as described
link:#uninstall[below].

If you have +llvm-config+ in your path, you can build and install
llvm-py this way:

-----------------------------------------------------------------------
$ tar jxvf llvm-py-0.2.tar.bz2
$ cd llvm-py-0.2
$ sudo python setup.py install
-----------------------------------------------------------------------

If you need to tell the build script where +llvm-config+ is, do it this
way:

-----------------------------------------------------------------------
$ tar jxvf llvm-py-0.2.tar.bz2
$ cd llvm-py-0.2
$ sudo python setup.py install --llvm-config=/home/mdevan/llvm/Release/bin/llvm-config
-----------------------------------------------------------------------

To build a debug version of llvm-py, that links against the debug
libraries of LLVM, use this:

-----------------------------------------------------------------------
$ tar jxvf llvm-py-0.2.tar.bz2
$ cd llvm-py-0.2
$ python setup.py build -g --llvm-config=/home/mdevan/llvm/Debug/bin/llvm-config
$ sudo python setup.py install --llvm-config=/home/mdevan/llvm/Debug/bin/llvm-config
-----------------------------------------------------------------------

Be warned that debug binaries will be huge (65MB+) !

`setup.py` is a standard Python distutils script. See the Python
documentation regarding http://docs.python.org/inst/inst.html[Installing
Python Modules] and http://docs.python.org/dist/dist.html[Distributing
Python Modules] for more information on such scripts.


[[uninstall]]
Uninstall
~~~~~~~~~

To get rid of llvm-py completely, if you wish to do so:

----
# rm -rf /usr/lib/python2.5/site-packages/llvm
# rm -f /usr/lib/python2.5/site-packages/llvm_py-0.1.egg-info
----

- You need to be root to do this. 
- Paths are for debian-based systems, in other distros it might be different.
- Note that there are version numbers (both Python's and llvm-py's)
  which you might need to change to suit your system.


The Concepts
------------

This section explains a few concepts related to LLVM.


Intermediate Representation
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The intermediate representation, or IR for short, is an in-memory data
structure that represents executable code. The IR data structures allow
for creation of types, constants, functions, function arguments,
instructions, global variables and so on. For example, to create a
function _sum_ that takes two integers and returns their sum, we need to
follow these steps:

- create an integer type _ti_ of required bitwidth
- create a function type _tf_ which takes two _ti_ -s and returns
  another _ti_
- create a function of type _tf_ named _sum_
- add a _basic block_ to the function
- using a helper object called an _instruction builder_, add two
  instructions into the basic block:
  . an instruction to add the two arguments and store the result into
    a temporary variable
  . a return instruction to return the value of the temporary variable

(A basic block is a block of instructions.)

LLVM has it's own instruction set; the instructions used above (+add+
and +ret+) are from this set. The LLVM instructions are at a higher
level than the usual assembly language; for example there are
instructions related to variable argument handling, exception handling,
and garbage collection. These allow high-level languages to be
represented cleanly in the IR.

SSA Form and PHI Nodes
~~~~~~~~~~~~~~~~~~~~~~

All LLVM instructions are represented in the _Static Single Assignment_
(SSA) form. Essentially, this means that any variable can be assigned to
only once. Such a representation facilitates better optimization, among
other benefits.

A consequence of single assignment are PHI (+++&#934;+++) nodes. These
are required when a variable can be assigned a different value based on
the path of control flow. For example, the value of +b+ at the end of
execution of the snippet below:

----
a = 1;
if (v < 10)
  a = 2;
b = a;
----

cannot be determined statically. The value of '2' cannot be assigned to
the 'original' +a+, since +a+ can be assigned to only once. There are
two +a+ 's in there, and the last assignment has to choose between which
version to pick. This is accomplished by adding a PHI node:

----
a1 = 1;
if (v < 10)
  a2 = 2;
b = PHI(a1, a2);
----

The PHI node selects +a1+ or +a2+, depending on where the control
reached the PHI node. The argument +a1+ of the PHI node is associated
with the block +"a1 = 1;"+ and +a2+ with the block +"a2 = 2;"+.

PHI nodes have to be explicitly created in the LLVM IR. Accordingly the
LLVM instruction set has an instruction called +phi+.


LLVM Assembly Language
~~~~~~~~~~~~~~~~~~~~~~

The LLVM IR can be represented offline in two formats
- a textual, human-readable form, similar to assembly language, called
  the LLVM assembly language (files with .ll extension)
- a binary form, called the LLVM bitcode (files with .bc extension)
All three formats (the in-memory IR, the LLVM assembly language and the
LLVM bitcode) represent the _same_ information. Each format can be
converted into the other two formats (using LLVM APIs).

The http://www.llvm.org/demo/[LLVM demo page] lets you type in C or C++
code, converts it into LLVM IR and outputs the IR as LLVM assembly
language code.

Just to get a feel of the LLVM assembly language, here's a function in C,
and the corresponding LLVM assembly (as generated by the demo page):

[C]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/* compute sum of 1..n */
unsigned sum(unsigned n)
{
  if (n == 0)
    return 0;
  else
    return n + sum(n-1);
}
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The corresponding LLVM assembly:

-----------------------------------------------------------------------
; ModuleID = '/tmp/webcompile/_4940_0.bc'
target datalayout = "e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:32:32"
target triple = "i386-pc-linux-gnu"

define i32 @sum(i32 %n) nounwind  {
entry:
	%tmp215 = icmp eq i32 %n, 0		; <i1> [#uses=1]
	br i1 %tmp215, label %bb10, label %tailrecurse.bb10_crit_edge

tailrecurse.bb10_crit_edge:		; preds = %entry
	%tmp = add i32 %n, -1		; <i32> [#uses=3]
	%tmp17 = mul i32 %tmp, %tmp		; <i32> [#uses=1]
	%tmp18 = add i32 %tmp17, %n		; <i32> [#uses=1]
	%tmp. = zext i32 %tmp to i64		; <i64> [#uses=2]
	%tmp19 = add i64 %tmp., -1		; <i64> [#uses=1]
	%tmp20 = mul i64 %tmp19, %tmp.		; <i64> [#uses=1]
	%tmp21 = lshr i64 %tmp20, 1		; <i64> [#uses=1]
	%tmp.22 = trunc i64 %tmp21 to i32		; <i32> [#uses=1]
	%tmp24 = sub i32 %tmp18, %tmp.22		; <i32> [#uses=1]
	ret i32 %tmp24

bb10:		; preds = %entry
	ret i32 0
}
-----------------------------------------------------------------------

Note the usage of SSA form and the total absence of any loop or
recursion at all! The long string called `target datalayout` is a
specification of the platform ABI (like endianness, sizes of types,
alignment etc.).

The http://www.llvm.org/docs/LangRef.html[LLVM Language Reference]
defines the LLVM assembly language including the entire instruction set.
The table below lists all the LLVM instructions. Each instruction links
to it's documentation.

include::instrset.inc[]

Intrinsics (instructions that start with +llvm.+) are not yet available
in llvm-py.

Modules
~~~~~~~

Modules, in the LLVM IR, are similar to a single `C` language source
file (.c file). A module contains:

- functions (declarations and definitions)
- global variables and constants
- global type aliases (typedef-s)

Modules are top-level containers; all executable code representation is
contained within modules.


Optimization and Passes
~~~~~~~~~~~~~~~~~~~~~~~

LLVM provides quite a few optimization algorithms that work on the IR.
These algorithms are organized as _passes_. Each pass does something
specific, like combining redundant instructions. Passes need not always
optimize the IR, it can also do other operations like inserting
instrumentation code, or analysing the IR (the result of which can be
used by passes that do optimizations) or even printing call graphs.

This LLVM http://www.llvm.org/docs/Passes.html[documentation page]
describes all the available passes, and what they do.

LLVM does not automatically choose to run any passes, anytime. Passes
have to be explicitly selected and run on each module. This gives you
the flexibility to choose transformations and optimizations that are
most suitable for the code in the module.

There is an LLVM binary called http://www.llvm.org/cmds/opt.html[opt],
which lets you run passes on bitcode files from the command line. You
can write your own passes (in C/C\+\+, as a shared library). This can be
loaded and executed by +opt+. (Although llvm-py does not allow you to
write your own passes, it does allow you to navigate the entire IR at
any stage, and perform any transforms on it as you like.)

Passes are run using a _pass manager_. TODO


Execution Engine
~~~~~~~~~~~~~~~~

TODO


BitCode
~~~~~~~

TODO


llvm-gcc
~~~~~~~~

TODO


The llvm-py Package
---------------------

The llvm-py is a Python package, consisting of 6 modules, that wrap
over enough LLVM APIs to allow the implementation of your own
compiler/VM backend in pure Python. If you're come this far, you
probably know why this is a good idea.

Out of the 6 modules, one is an ``extension'' module (i.e., it is
written in C), and another one is a small private utility module, which
leaves 4 public modules.  These are:

- +llvm+ -- top-level package, common classes (like exceptions)
- +llvm.core+ -- IR-related APIs
- +llvm.ee+ -- execution engine related APIs
- +llvm.passes+ -- pass manager and passes related APIs

The modules contain only classes and (integer) constants. Mostly simple
Python constructs are used (deliberately) --
http://docs.python.org/lib/built-in-funcs.html[property()] and
http://wiki.python.org/moin/PythonDecoratorLibrary[property
decorators] are probably the most exotic animals around. All classes are
"new style" classes. The APIs are designed to be navigable (and
guessable!) once you know a few conventions. These conventions are
highlighted in the sections below.

Here is a quick overview of the contents of each package:

.llvm
- LLVMException -- exception class (currently the only one)

.llvm.core
- Module -- represents an LLVM Module
- Type -- represents an LLVM Type
- IntegerType, FunctionType, StructType, ArrayType, PointerType,
  VectorType  -- derived classes of Type
- TypeHandle -- used for constructing recursive (self-referencing) types
  (e.g. linked list nodes)
- Value -- represents an LLVM Value
- Constant, GlobalValue, GlobalVariable, Argument, Function,
  Instruction, CallOrInvokeInstruction, PHINode, SwitchInstruction --
  various derived classes of Value
- BasicBlock -- another derived of Value, represents an LLVM basic block
- Builder -- used for creating instructions, wraps LLVM IRBuilder helper
  class
- ModuleProvider -- required to use modules in execution engine and pass
  manager
- constants +TYPE_*+ that represents various types
- constants +CC_*+ that represent calling conventions
- constants +IPRED_*+ and +RPRED_*+ that represent integer and real
  comparison predicates (like less than, greater than etc.)
- constants +LINKAGE_*+ that represent linkage of symbols (external,
  internal etc.)
- constants +VISIBILITY_*+ that represents visibility of symbols
  (default, hidden, protected)
- constants +ATTR_*+ that represent function parameter attributes

.llvm.ee
- ExecutionEngine -- represents an execution engine (which can be an
  either an interpreter or a JIT)
- TargetData -- represents the ABI of the target platform (details like
  sizes and alignment of primitive types, endinanness etc)

.llvm.passes
- PassManager -- represents an LLVM pass manager 
- FunctionPassManager -- represents an LLVM function pass manager
- constants +PASS_*+ that represent various passes

.A note on the 'import'ing of these modules
Pythonically, modules are imported with the statement +"import
llvm.core"+. However, you might find it more convenient to import
llvm-py modules thus:

[python]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
from llvm import *
from llvm.core import *
from llvm.ee import *
from llvm.passes import *
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This avoids quite some typing. Both conventions work, however.

TIP: Python-style documentation strings (`\_\_doc\_\_`) are present in
llvm-py. You can use the +help()+ of the interactive Python
interpreter or the +object?+ of http://ipython.scipy.org/moin/[IPython]
to get online help. (Note: not complete yet!)


Module (llvm.core)
~~~~~~~~~~~~~~~~~~

Modules are top-level container objects. You need to create a module
object first, before you can add global variables, aliases or functions.
Modules are created using the static method +Module.new+:

[python]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#!/usr/bin/env python

from llvm import *
from llvm.core import *

# create a module
my_module = Module.new('my_module')
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The constructor of the Module class should _not_ be used to instantiate
a Module object. This is a common feature for all llvm-py classes.

[TIP]
.Convention
=======================================================================
*All* llvm-py objects are instantiated using static methods of
corresponding classes. Constructors _should not_ be used.
=======================================================================

The argument `my_module` is a module identifier (a plain string). The
attributes of the `Module` class is:

.llvm.core.Module
[caption=""]
=======================================================================
.Static Constructors
`new(module_id)`::
    Create a new `Module` instance with given `module_id`. The `module_id`
    should be a string.

.Properties
`data_layout`::
    A string representing the ABI of the platform.
`target`::
    A string like `i386-pc-linux-gnu` or `i386-pc-solaris2.8`.
`global_variables` [read-only]::
    An iterable that yields `GlobalVariable` objects, that represent
    the global variables of the module.
`functions` [read-only]::
    An iterable that yields `Function` objects, that represent functions
    in the module.

.Methods
`add_type_name(name, ty)`::
    Add an alias (typedef) for the type `ty` with the name `name`.
`delete_type_name(name)`::
    Delete an alias with the name `name`.
`add_global_variable(ty, name)`::
    Add a global variable of the type `ty` with the name `name`.
    Returns a `GlobalVariable` object.
`get_global_variable_named(name)`::
    Get a `GlobalVariable` object corresponding to the global
    variable with the name `name`. Raises `LLVMException` if such a
    variable does not exist.
`add_function(ty, name)`::
    Add a function named `name` with the function type `ty`. `ty` must
    of an object of type `FunctionType`.
`get_function_named(name)`::
    Get a `Function` object corresponding to the function with the name
    `name`. Raises `LLVMException` if such a function does not exist.
`verify()`::
    Verify the correctness of the module. Raises `LLVMException` on
    errors.

.Special Methods
`\_\_str\_\_`::
    `Module` objects can be stringified into it's LLVM assembly language
    representation.
`\_\_eq\_\_`::
    `Module` objects can be compared for equality. Internally, this
    converts both arguments into their LLVM assembly representations and
    compares the resultant strings.
=======================================================================

[TIP]
.Convention
=======================================================================
*All* llvm-py objects (where it makes sense), when stringified, return
the LLVM assembly representation. `` `print module_obj` '' for example,
prints the LLVM assembly form of the entire module.

Such objects, when compared for equality, internally compare these
string representations.
=======================================================================


Types (llvm.core)
~~~~~~~~~~~~~~~~~

Types are what you think they are. A instance of +llvm.core.Type+, or
one of its derived classes, represent a type. llvm-py does not use as
many classes to represent types as does LLVM itself. Some types are
represented using +llvm.core.Type+ itself and the rest are represented
using derived classes of +llvm.core.Type+. As usual, an instance is created
via one of the static methods of +Type+. These methods return an
instance of either +llvm.core.Type+ itself or one of its derived
classes.

The following table lists all the available types along with the static
method which has to be used to construct it and the name of the class whose
object is actually returned by the static method.

[frame="all",grid="all"]
`50`30`20~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Name,Constructor Method,Class
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
integer of bitwidth `n`, +Type.int(n)+, +IntegerType+
32-bit float, +Type.float()+, +Type+
64-bit double, +Type.double()+, +Type+
80-bit float, +Type.x86_fp80()+, +Type+
128-bit float (112-bit mantissa), +Type.fp128()+, +Type+
128-bit float (two 64-bits), +Type.ppc_fp128()+, +Type+
function, "+Type.function(r, p, v)+", +FunctionType+
unpacked struct, +Type.struct(eltys)+, +StructType+
packed struct, +Type.packed_struct(eltys)+, +StructType+
array, "+Type.array(elty, count)+", +ArrayType+
pointer to value of type `pty`, "+Type.pointer(pty, addrspc)+", +PointerType+
vector, "+Type.vector(elty, count)+", +VectorType+
void, +Type.void()+, +Type+
label, +Type.label()+, +Type+
opaque, +Type.opaque()+, +Type+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The class hierarchy is:
-----------------------------------------------------------------------
Type
  IntegerType
  FunctionType
  StructType
  ArrayType
  PointerType
  VectorType
-----------------------------------------------------------------------

The class-level documentation follows:

.llvm.core.Type
[caption=""]
=======================================================================
.Static Constructors
`int(n)`::
    Create an integer type of bit width `n`.
`float()`::
    Create a 32-bit floating point type.
`double()`::
    Create a 64-bit floating point type.
`x86_fp80()`::
    Create a 80-bit 80x87-style floating point type.
`fp128()`::
    Create a 128-bit floating point type (112-bit mantissa).
`ppc_fp128()`::
    Create a 128-bit float (two 64-bits).
`function(ret, params, vararg=False)`::
    Create a function type, having the return type `ret` (must be a
    `Type`), accepting the parameters `params`, where `params` is an
    iterable, that yields `Type` objects representing the type of
    each function argument in order. If `vararg` is `True`, function is
    variadic.
`struct(eltys)`::
    Create an unpacked structure. `eltys` is an iterable, that yields
    `Type` objects representing the type of each element in order.
`packed_struct(eltys)`::
    Like `struct(eltys)`, but creates a packed struct.
`array(elty, count)`::
    Creates an array type, holding `count` elements, each of type `elty`
    (which should be a `Type`).
`pointer(pty, addrspc=0)`::
    Create a pointer to type `pty` (which should be a `Type). `addrspc`
    is an integer that represents the address space of the pointer (see
    LLVM docs / ask on llvm-dev for more info).
`void()`::
    Creates a void type. Used for function return types.
`label()`::
    Creates a label type.
`opaque()`::
    Opaque type, used for creating self-referencing types.

.Properties
`kind` [read-only]::
    A value (enum) representing the ``type'' of the object. It will be
    one of the following constants defined in `llvm.core`:
+
[python]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TYPE_VOID       = 0
TYPE_FLOAT      = 1
TYPE_DOUBLE     = 2
TYPE_X86_FP80   = 3
TYPE_FP128      = 4
TYPE_PPC_FP128  = 5
TYPE_LABEL      = 6
TYPE_INTEGER    = 7
TYPE_FUNCTION   = 8
TYPE_STRUCT     = 9
TYPE_ARRAY      = 10
TYPE_POINTER    = 11
TYPE_OPAQUE     = 12
TYPE_VECTOR     = 13
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
Example:
+
[python]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
assert Type.int().kind == TYPE_INTEGER
assert Type.void().kind == TYPE_VOID
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.Methods
`refine`::
    Used for constructing self-referencing types. See the documentation
    of `TypeHandle` objects.

.Special Methods
`\_\_str\_\_`::
    `Type` objects can be stringified into it's LLVM assembly language
    representation.
`\_\_eq\_\_`::
    `Type` objects can be compared for equality. Internally, this
    converts both arguments into their LLVM assembly representations and
    compares the resultant strings.
=======================================================================


.llvm.core.IntegerType
[caption=""]
=======================================================================
.Base Class
- `llvm.core.Type`

.Properties
`width` [read-only]::
    The width of the integer type, in number of bits.
=======================================================================


.llvm.core.FunctionType
[caption=""]
=======================================================================
.Base Class
- `llvm.core.Type`

.Properties
`return_type` [read-only]::
    A `Type` object, representing the return type of the function.
`vararg` [read-only]::
    `True` if the function is variadic.
`args` [read-only]::
    Returns an iterable object that yields `Type` objects that
    represent, in order, the types of the arguments accepted by the
    function. Used like this:
+
[python]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
func_type = Type.function( Type.int(), [ Type.int(), Type.int() ] )
for arg in func_type.args:
    assert arg.kind == TYPE_INTEGER
    assert arg == Type.int()
assert func_type.arg_count == len(func_type.args)
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

`arg_count` [read-only]::
    The number of arguments. Same as `len(obj.args)`, but faster.

=======================================================================


.llvm.core.StructType
[caption=""]
=======================================================================
.Base Class
- `llvm.core.Type`

.Properties
`packed` [read-only]::
    `True` if the structure is packed (no padding between elements).
`elements` [read-only]::
    Returns an iterable object that yields `Type` objects that
    represent, in order, the types of the elements of the structure.
    Used like this:
+
[python]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
struct_type = Type.struct( [ Type.int(), Type.int() ] )
for elem in struct_type.elements:
    assert elem.kind == TYPE_INTEGER
    assert elem == Type.int()
assert struct_type.element_count == len(struct_type.elements)
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

`element_count` [read-only]::
    The number of elements. Same as `len(obj.elements)`, but faster.

=======================================================================


.llvm.core.ArrayType
[caption=""]
=======================================================================
.Base Class
- `llvm.core.Type`

.Properties
`element` [read-only]::
    A `Type` object representing the type of the element of the array.
`count` [read-only]::
    The number of elements in the array.
=======================================================================


.llvm.core.PointerType
[caption=""]
=======================================================================
.Base Class
- `llvm.core.Type`

.Properties
`address_space` [read-only]::
    The address space of the pointer.
`pointee` [read-only]::
    TODO *missing*
=======================================================================


.llvm.core.VectorType
[caption=""]
=======================================================================
.Base Class
- `llvm.core.Type`

.Properties
`element` [read-only]::
    A `Type` object representing the type of the element of the vector.
`count` [read-only]::
    The number of elements in the vector.
=======================================================================

Here is an example that demonstrates the creation of types:

[python]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#!/usr/bin/env python

# integers
int_ty      = Type.int()
bool_ty     = Type.int(1)
int_64bit   = Type.int(64)

# floats
sprec_real  = Type.float()
dprec_real  = Type.double()

# arrays and vectors
intar_ty    = Type.array( int_ty, 10 )     # "typedef int intar_ty[10];"
twodim      = Type.array( intar_ty , 10 )  # "typedef int twodim[10][10];"
vec         = Type.array( int_ty, 10 )

# structures
s1_ty       = Type.struct( [ int_ty, sprec_real ] )
    # "struct s1_ty { int v1; float v2; };"

# pointers
intptr_ty   = Type.pointer(int_ty)         # "typedef int *intptr_ty;"

# functions
f1 = Type.function( int_ty, [ int_ty ] )
    # functions that take 1 int_ty and return 1 int_ty

f2 = Type.function( Type.void(), [ int_ty ] )
    # functions that take 1 int_ty and return nothing

fnargs = [ Type.pointer( Type.int(8) ) ]
printf = Type.function( Type.int(), fnargs, True )
    # variadic function
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Values (llvm.core)
~~~~~~~~~~~~~~~~~

`llvm.core.Value` is the base class of all values computed by a program
that may be used as operands to other values. A value has a type
associated with it (an object of `llvm.core.Type`).

The class hierarchy is:
-----------------------------------------------------------------------
Value
  Constant
    GlobalValue
      GlobalVariable
      Function
  Argument
  Instruction
    CallOrInvokeInstruction
    PHINode
    SwitchInstruction
    BasicBlock
-----------------------------------------------------------------------

The `Value` class is abstract, it's not meant to be instantiated.
`Constant`-s represent constants that appear within code or as
initializers of globals. They are constructed using static methods of
`Constant`. The `Constant` class is covered in a separate section below.
The `Function` object represents an instance of a function type. Such
objects contain `Argument` objects, which represent the actual,
local-variable-like arguments of the function (not to be confused with
the arguments returned by a function _type_ object -- these represent
the _type_ of the arguments). The various `Instruction`-s are created by
the `Builder` class. These are also covered separately.

`Value` objects have a type (read-only), and a name (read-write).

.llvm.core.Value
[caption=""]
=======================================================================
.Properties
`name`::
    The name of the value.
`type` [read-only]::
    An `llvm.core.Type` object representing the type of the value.

.Special Methods
`\_\_str\_\_`::
    `Value` objects can be stringified into it's LLVM assembly language
    representation.
`\_\_eq\_\_`::
    `Value` objects can be compared for equality. Internally, this
    converts both arguments into their LLVM assembly representations and
    compares the resultant strings.
=======================================================================


Constants (llvm.core)
~~~~~~~~~~~~~~~~~~~~~

`Constant`-s represents constants that appear within the code. The
values of such objects are known at creation time. Constants can be
created from Python constants. A constant expression is also a constant
-- given a `Constant` object, an operation (like addition, subtraction
etc) can be specified, to yield a new `Constant` object. Let's see some
examples:

[python]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#!/usr/bin/env python

ti = Type.int()                         # a 32-bit int type

k1 = Constant.int(ti, 42)               # "int k1 = 42;"
k2 = k1.add( Constant.int( ti, 10 ) )   # "int k2 = k1 + 10;"

tr = Type.float()

r1 = Constant.real(tr, "3.141592")      # create from a string
r2 = Constant.real(tr, 1.61803399)      # create from a Python float
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following constructors (static methods) can be used to create
constants:

[[constctors]]
[frame="all",grid="all"]
`25`75~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Constructor Method, What It Creates
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
`null(ty)`, A null value (all zeros) of type `ty`
`all_ones(ty)`, All 1's value of type `ty`
`undef(ty)`, An ``undefined'' value of type `ty`
"`int(ty, value)`", "Integer of type `ty`, with value `value` (a Python int or long)"
"`int_signextend(ty, value)`", Integer of signed type `ty` (use for signed types)
"`real(ty, value)`", "Floating point value of type `ty`, with value `value` (a Python float)"
"`stringz(value)`", "A null-terminated string. `value` is a Python string"
"`string(value)`", "As `string(ty)`, but not null terminated"
"`array(ty, consts)`", "Array of type `ty`, initialized with `consts` (an iterable yielding `Constant` objects of the appropriate type)"
"`struct(ty, consts)`", "Struct (unpacked) of type `ty`, initialized with `consts` (an iterable yielding `Constant` objects of the appropriate type)"
"`packed_struct(ty, consts)`", "As `struct(ty, consts)` but packed"
"`vector(consts)`", "Vector, initialized with `consts` (an iterable yielding `Constant` objects of the appropriate type)"
"`sizeof(ty)`", "Constant value representing the sizeof the type `ty`"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operations are available:

[[constops]]
[frame="all",grid="all"]
`25`75~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Method, Operation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
`k.neg()`, "negation, same as `0 - k`"
`k.not_()`, "1's complement of `k`. Note trailing underscore."
`k.add(k2)`, "`k + k2`"
`k.sub(k2)`, "`k - k2`"
`k.mul(k2)`, "`k * k2`"
`k.udiv(k2)`, "Quotient of unsigned division of `k` with `k2`"
`k.sdiv(k2)`, "Quotient of signed division of `k` with `k2`"
`k.fdiv(k2)`, "Quotient of floating point division of `k` with `k2`"
`k.urem(k2)`, "Reminder of unsigned division of `k` with `k2`"
`k.srem(k2)`, "Reminder of signed division of `k` with `k2`"
`k.frem(k2)`, "Reminder of floating point division of `k` with `k2`"
`k.and_(k2)`, "Bitwise and of `k` and `k2`. Note trailing underscore."
`k.or_(k2)`, "Bitwise or of `k` and `k2`. Note trailing underscore."
`k.xor(k2)`, "Bitwise exclusive-or of `k` and `k2`."
"`k.icmp(ipred, k2)`", "Compare `k` with `k2` using the predicate `ipred`. See table link:#ipred[below] for list of predicates for integer operands."
"`k.fcmp(rpred, k2)`", "Compare `k` with `k2` using the predicate `rpred`. See table link:#rpred[below] for list of predicates for real operands."
`k.shl(k2)`, "Shift `k` left by `k2` bits."
`k.lshr(k2)`, "Shift `k` logically right by `k2` bits (new bits are 0s)."
`k.ashr(k2)`, "Shift `k` arithmetically right by `k2` bits (new bits are same as previous sign bit)."
`k.gep(indices)`, "TODO"
`k.trunc(ty)`, "Truncate `k` to a type `ty` of lower bitwidth."
`k.sext(ty)`, "Sign extend `k` to a type `ty` of higher bitwidth, while extending the sign bit."
`k.zext(ty)`, "Sign extend `k` to a type `ty` of higher bitwidth, all new bits are 0s."
fptrunc, TODO
fpext, TODO
uitofp, TODO
sitofp, TODO
fptoui, TODO
fptosi, TODO
ptrtoint, TODO
inttoptr, TODO
bitcast, TODO
select, TODO
extract_element, TODO
insert_element, TODO
shuffle_vector, TODO
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[[ipred]]
Predicates for use with `icmp` instruction are listed below. All
of these are integer constants defined in the `llvm.core` module.

[frame="all",grid="all"]
`25`75~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Value, Meaning
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
`IPRED_EQ`, Equality
`IPRED_NE`, Inequality
`IPRED_UGT`, Unsigned greater than
`IPRED_UGE`, Unsigned greater than or equal
`IPRED_ULT`, Unsigned less than
`IPRED_ULE`, Unsigned less than or equal
`IPRED_SGT`, Signed greater than
`IPRED_SGE`, Signed greater than or equal
`IPRED_SLT`, Signed less than
`IPRED_SLE`, Signed less than or equal
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[[rpred]]
Predicates for use with `fcmp` instruction are listed below. All
of these are integer constants defined in the `llvm.core` module.

[frame="all",grid="all"]
`25`75~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Value, Meaning
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
`RPRED_FALSE`, Always false
`RPRED_OEQ`, True if ordered and equal
`RPRED_OGT`, True if ordered and greater than
`RPRED_OGE`, True if ordered and greater than or equal
`RPRED_OLT`, True if ordered and less than
`RPRED_OLE`, True if ordered and less than or equal
`RPRED_ONE`, True if ordered and operands are unequal
`RPRED_ORD`, True if ordered (no NaNs)
`RPRED_UNO`, True if unordered: `isnan(X) | isnan(Y)`
`RPRED_UEQ`, True if unordered or equal
`RPRED_UGT`, True if unordered or greater than
`RPRED_UGE`, "True if unordered, greater than or equal"
`RPRED_ULT`, "True if unordered, or less than"
`RPRED_ULE`, "True if unordered, less than or equal"
`RPRED_UNE`, True if unordered or not equal
`RPRED_TRUE `, Always true
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.llvm.core.Constant
[caption=""]
=======================================================================
.Base Class
- `llvm.core.Value`

.Static Constructors
See table of constructors link:#constctors[above] for full list.

.Methods
See table of operations link:#constops[above] for full list. There are no other
methods.
=======================================================================


TypeHandle (llvm.core)
~~~~~~~~~~~~~~~~~~~~~~

TypeHandle objects are used to create recursive types, like this linked
list node structure in C:

[C]
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
struct node
{
    int data;
    struct node *next;
};
source~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This can be realized in llvm-py like this:

-----------------------------------------------------------------------
include::../../test/typehandle.py[]
-----------------------------------------------------------------------

which gives the output:

-----------------------------------------------------------------------
; ModuleID = 'mod1'
	%struct.node = type { i32, %struct.node* }
-----------------------------------------------------------------------

For more details on what is going on here, please refer the LLVM
Programmer's Manual section
http://llvm.org/docs/ProgrammersManual.html#TypeResolve["LLVM Type
Resolution"]. The TypeHandle class of llvm-py corresponds to
http://www.llvm.org/doxygen/classllvm_1_1PATypeHolder.html[`llvm::PATypeHolder`]
in C\+\+. The above example is available as
http://code.google.com/p/llvm-py/source/browse/trunk/test/typehandle.py[test/typehandle.py]
in the source distribution.

.llvm.core.TypeHandle
[caption=""]
=======================================================================
.Static Constructors
`new(abstract_ty)`::
    create a new `TypeHandle` instance, which holds a reference to the
    given abstract type `abstract_ty`. Typically, the abstract type used
    is `Type.opaque()`.

.Properties
`type`::
    returns the contained type. Typically the `refine` method is called
    on the returned type.
=======================================================================


Instructions (llvm.core)
~~~~~~~~~~~~~~~~~~~~~~~~

TODO


Basic Block (llvm.core)
~~~~~~~~~~~~~~~~~~~~~~~

TODO


Builder (llvm.core)
~~~~~~~~~~~~~~~~~~~

TODO


Module Provider (llvm.core)
~~~~~~~~~~~~~~~~~~~~~~~~~~~

TODO


Execution Engine (llvm.ee)
~~~~~~~~~~~~~~~~~~~~~~~~~~

TODO


Target Data (llvm.ee)
~~~~~~~~~~~~~~~~~~~~~

TODO


Pass Managers and Passes (llvm.passes)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TODO


[[examples]]
Annotated Examples
------------------

include::example.inc[]


About the llvm-py Project
---------------------------

llvm-py lives at
http://mdevan.nfshost.com/llvm-py/[http://mdevan.nfshost.com/llvm-py/].
The code (subversion repository) and the issue tracker are hosted on the
Google code hosting service, at
http://code.google.com/p/llvm-py/[http://code.google.com/p/llvm-py/].
It is distributed under the new BSD license, the full license text is in
the file named
http://code.google.com/p/llvm-py/source/browse/trunk/LICENSE[LICENSE]
available in the source distribution.

The entire llvm-py website is generated from marked up text files
using the tool http://www.methods.co.nz/asciidoc/[AsciiDoc]. These text
files and the (pre-)generated HTML pages are available in the source
distribution.

llvm-py is an ongoing, live project. Your contributions in any form
are most welcome. You can checkout the latest SVN HEAD from
http://code.google.com/p/llvm-py/source/checkout[here].

Mahadevan R wrote llvm-py and works on it in his spare time. He can be
reached at _mdevan.foobar@gmail.com_.

